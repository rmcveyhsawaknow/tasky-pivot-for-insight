name: Terraform Plan

on:
  push:
    branches: ['deploy/*']
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/terraform-*.yml'
      - 'scripts/setup-alb-controller.sh'
  pull_request:
    branches: ['deploy/*']
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - '.github/workflows/terraform-plan.yml'
      - 'scripts/setup-alb-controller.sh'
  workflow_dispatch:

env:
  TF_VERSION: '1.7.5'
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}
  PROJECT_NAME: ${{ vars.PROJECT_NAME || 'tasky' }}
  ENVIRONMENT: ${{ vars.ENVIRONMENT || 'dev' }}
  STACK_VERSION: ${{ vars.STACK_VERSION || 'v15' }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Create terraform.tfvars for planning
        run: |
          cat > terraform/terraform.tfvars << EOF
          project_name = "${{ env.PROJECT_NAME }}"
          environment = "${{ env.ENVIRONMENT }}"
          stack_version = "${{ env.STACK_VERSION }}"
          aws_region = "${{ env.AWS_REGION }}"
          mongodb_instance_type = "${{ vars.MONGODB_INSTANCE_TYPE || 't3.micro' }}"
          vpc_cidr = "${{ vars.VPC_CIDR || '10.0.0.0/16' }}"
          mongodb_username = "${{ secrets.MONGODB_USERNAME }}"
          mongodb_password = "${{ secrets.MONGODB_PASSWORD }}"
          mongodb_database_name = "${{ vars.MONGODB_DATABASE_NAME || 'go-mongodb' }}"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          EOF

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config=backend-prod.hcl
        working-directory: terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: terraform
        continue-on-error: true

      - name: Terraform Cost Estimation
        id: cost
        run: |
          echo "cost_estimate=Estimated monthly cost: ~$50-75 USD (EKS: ~$30, EC2: ~$15, S3/ALB: ~$10)" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Security and Compliance Check
        id: security
        run: |
          echo "üîç Security validation:" >> security_report.md
          echo "- ‚úÖ Non-root user configured in containers" >> security_report.md
          echo "- ‚úÖ RBAC cluster-admin permissions configured" >> security_report.md
          echo "- ‚úÖ MongoDB authentication enabled" >> security_report.md
          echo "- ‚úÖ S3 public read access configured for backups" >> security_report.md
          echo "- ‚úÖ VPC with private/public subnet separation" >> security_report.md
          echo "security_report<<EOF" >> $GITHUB_OUTPUT
          cat security_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            #### Cost Estimation üí∞
            \`\`\`
            ${{ steps.cost.outputs.cost_estimate }}
            \`\`\`

            #### Security & Compliance ‚úÖ
            \`\`\`
            ${{ steps.security.outputs.security_report }}
            \`\`\`

            #### Deployment Preview üöÄ
            **Infrastructure Components:**
            - VPC with 3 AZs (public/private subnets)
            - EKS Cluster (${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-${{ env.STACK_VERSION }}-eks-cluster)
            - MongoDB EC2 instance (Amazon Linux 2, MongoDB 4.0.x)
            - S3 backup bucket with public read access
            - AWS Load Balancer Controller via Kubernetes Ingress

            **Application Deployment:**
            - Tasky Go application with cluster-admin RBAC
            - MongoDB authentication enabled
            - Automated S3 backups every 5 minutes
            - Public ALB access for application

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
